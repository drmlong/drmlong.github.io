Exp2ColorModelNoWM <- glmer(Modification ~ ConditionCtr * GroupCtr * AgeCtr * SwitchingCtr + (ConditionCtr | Participant) + (ConditionCtr * GroupCtr * AgeCtr * SwitchingCtr | Target), family="binomial", data=Exp2Color, control = glmerControl(optimizer="bobyqa", optCtrl = list(maxfun = 1e6)))
d1 <- data.frame(read.delim("~/Desktop/R Scripts/YPigEx1.txt"))
summary(d1)
d1 %>%
mutate(Condition=fct_recode(Condition, 'High Var.\n(Mono)'='Mono', 'Low Var.\n(Poly)'='Poly')
) %>%
ggplot(aes(Condition, Color, fill=Condition)) + scale_fill_manual(values=alpha(c('violetred4', 'royalblue3'))) +
#facet_grid(~PresentationBlock) +
stat_summary(fun.y=mean, geom='bar') +
stat_summary(aes(group=Subject, color=Condition), fun.y=mean, geom='point', alpha=1/2, size=3) +
stat_summary(fun.data=mean_cl_boot, geom='linerange') +
guides(fill=F) +
ylab('Proportion Overspecification') +
xlab('') +
facet_wrap(~ PresentationBlock) +
theme_classic()
d1 %>%
mutate(Condition=fct_recode(Condition, 'High Var.\n(Mono)'='Mono', 'Low Var.\n(Poly)'='Poly')) %>%
ggplot(aes(Condition, Color, fill=Condition)) + scale_fill_manual(values=alpha(c('violetred4', 'royalblue3'))) +
#facet_grid(~PresentationBlock) +
stat_summary(fun.y=mean, geom='bar') +
stat_summary(aes(group=Subject, color=Condition), fun.y=mean, geom='point', alpha=1/2, size=3) +
stat_summary(fun.data=mean_cl_boot, geom='linerange') +
guides(fill=F) +
ylab('Proportion Overspecification') +
xlab('') +
facet_wrap(~ PresentationBlock) +
theme_classic()
#
d1 %>%
mutate(Condition=fct_recode(Condition, 'High Var.\n(Mono)'='Mono', 'Low Var.\n(Poly)'='Poly')
) %>%
ggplot(aes(Condition, Color, fill=Condition)) + scale_fill_manual(values=alpha(c('violetred4', 'royalblue3'))) +
#facet_grid(~PresentationBlock) +
stat_summary(fun.y=mean, geom='bar') +
stat_summary(aes(group=Subject, color=Condition), fun.y=mean, geom='point', alpha=1/2, size=3) +
stat_summary(fun.data=mean_cl_boot, geom='linerange') +
guides(fill=F) +
ylab('Proportion Overspecification') +
xlab('') +
facet_wrap(~ PresentationBlock) +
theme_classic()
Condition=fct_recode(Condition, 'High Var.\n(Mono)'='Mono', 'Low Var.\n(Poly)'='Poly')
d1 %>%
Condition=fct_recode(Condition, 'High Var.\n(Mono)'='Mono', 'Low Var.\n(Poly)'='Poly')
) %>%
d1 %>%
(Condition=fct_recode(Condition, 'High Var.\n(Mono)'='Mono', 'Low Var.\n(Poly)'='Poly')) %>%
d1 %>%
(Condition=fct_recode(Condition, 'High Var.\n(Mono)'='Mono', 'Low Var.\n(Poly)'='Poly')) %>%
ggplot(aes(Condition, Color, fill=Condition)) + scale_fill_manual(values=alpha(c('violetred4', 'royalblue3'))) +
#facet_grid(~PresentationBlock) +
stat_summary(fun.y=mean, geom='bar') +
stat_summary(aes(group=Subject, color=Condition), fun.y=mean, geom='point', alpha=1/2, size=3) +
stat_summary(fun.data=mean_cl_boot, geom='linerange') +
guides(fill=F) +
ylab('Proportion Overspecification') +
xlab('') +
facet_wrap(~ PresentationBlock) +
theme_classic()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(brms)
library(forcats)
library(Hmisc)
d1 %>%
(Condition=fct_recode(Condition, 'High Var.\n(Mono)'='Mono', 'Low Var.\n(Poly)'='Poly')) %>%
ggplot(aes(Condition, Color, fill=Condition)) + scale_fill_manual(values=alpha(c('violetred4', 'royalblue3'))) +
#facet_grid(~PresentationBlock) +
stat_summary(fun.y=mean, geom='bar') +
stat_summary(aes(group=Subject, color=Condition), fun.y=mean, geom='point', alpha=1/2, size=3) +
stat_summary(fun.data=mean_cl_boot, geom='linerange') +
guides(fill=F) +
ylab('Proportion Overspecification') +
xlab('') +
facet_wrap(~ PresentationBlock) +
theme_classic()
d1 %>%
mutate(Condition=fct_recode(Condition, 'High Var.\n(Mono)'='Mono', 'Low Var.\n(Poly)'='Poly')) %>%
ggplot(aes(Condition, Color, fill=Condition)) + scale_fill_manual(values=alpha(c('violetred4', 'royalblue3'))) +
#facet_grid(~PresentationBlock) +
stat_summary(fun.y=mean, geom='bar') +
stat_summary(aes(group=Subject, color=Condition), fun.y=mean, geom='point', alpha=1/2, size=3) +
stat_summary(fun.data=mean_cl_boot, geom='linerange') +
guides(fill=F) +
ylab('Proportion Overspecification') +
xlab('') +
facet_wrap(~ PresentationBlock) +
theme_classic()
tiff('test.tiff', units="in", width=5, height=4, res=300, compression = 'lzw')
d1 %>%
mutate(Condition=fct_recode(Condition, 'High Var.\n(Mono)'='Mono', 'Low Var.\n(Poly)'='Poly')) %>%
ggplot(aes(Condition, Color, fill=Condition)) + scale_fill_manual(values=alpha(c('violetred4', 'royalblue3'))) +
#facet_grid(~PresentationBlock) +
stat_summary(fun.y=mean, geom='bar') +
stat_summary(aes(group=Subject, color=Condition), fun.y=mean, geom='point', alpha=1/2, size=3) +
stat_summary(fun.data=mean_cl_boot, geom='linerange') +
guides(fill=F) +
ylab('Proportion Overspecification') +
xlab('') +
facet_wrap(~ PresentationBlock) +
theme_classic()
#ggsave('Figures/e1sv.svg', height=3, width=3)
dev.off()
tiff('test.tiff', units="in", width=5, height=4, res=300, compression = 'lzw')
d1 %>%
mutate(Condition=fct_recode(Condition, 'High Var.\n(Mono)'='Mono', 'Low Var.\n(Poly)'='Poly')) %>%
ggplot(aes(Condition, Color, fill=Condition)) + scale_fill_manual(values=alpha(c('violetred4', 'royalblue3'))) +
#facet_grid(~PresentationBlock) +
stat_summary(fun.y=mean, geom='bar') +
stat_summary(aes(group=Subject, color=Condition), fun.y=mean, geom='point', alpha=1/2, size=3) +
stat_summary(fun.data=mean_cl_boot, geom='linerange') +
guides(fill=F) +
ylab('Proportion Overspecification') +
xlab('') +
facet_wrap(~ PresentationBlock) +
theme_classic()
#ggsave('Figures/e1sv.svg', height=3, width=3)
dev.off()
summary(d1)
tiff('test.tiff', units="in", width=5, height=4, res=300, compression = 'lzw')
d1 %>%
mutate(Condition=fct_recode(Condition, 'High Var.\n(Mono)'='Mono', 'Low Var.\n(Poly)'='Poly')) %>%
ggplot(aes(Condition, Color, fill=Condition)) + scale_fill_manual(values=alpha(c('violetred4', 'royalblue3'))) +
#facet_grid(~PresentationBlock) +
stat_summary(fun.y=mean, geom='bar') +
stat_summary(aes(group=Subject, color=Condition), fun.y=mean, geom='point', alpha=1/2, size=3) +
stat_summary(fun.data=mean_cl_boot, geom='linerange') +
guides(fill=F) +
ylab('Proportion Overspecification') +
xlab('') +
facet_wrap(~ PresentationBlock) +
theme_classic()
#ggsave('Figures/e1sv.svg', height=3, width=3)
dev.off()
tiff('test5.tiff', units="in", width=5, height=4, res=300, compression = 'lzw')
d1 %>%
mutate(Condition=fct_recode(Condition, 'High Var.\n(Mono)'='Mono', 'Low Var.\n(Poly)'='Poly')) %>%
ggplot(aes(Condition, Color, fill=Condition)) + scale_fill_manual(values=alpha(c('violetred4', 'royalblue3'))) +
#facet_grid(~PresentationBlock) +
stat_summary(fun.y=mean, geom='bar') +
stat_summary(aes(group=Subject, color=Condition), fun.y=mean, geom='point', alpha=1/2, size=3) +
stat_summary(fun.data=mean_cl_boot, geom='linerange') +
guides(fill=F) +
ylab('Proportion Overspecification') +
xlab('') +
facet_wrap(~ PresentationBlock) +
theme_classic()
#ggsave('Figures/e1sv.svg', height=3, width=3)
dev.off()
tiff('test5.tiff', units="in", width=5, height=4, res=300, compression = 'lzw')
ggplot(aes(Condition, Color, fill=Condition)) + scale_fill_manual(values=alpha(c('violetred4', 'royalblue3'))) +
#facet_grid(~PresentationBlock) +
stat_summary(fun.y=mean, geom='bar') +
stat_summary(aes(group=Subject, color=Condition), fun.y=mean, geom='point', alpha=1/2, size=3) +
stat_summary(fun.data=mean_cl_boot, geom='linerange') +
guides(fill=F) +
ylab('Proportion Overspecification') +
xlab('') +
facet_wrap(~ PresentationBlock) +
theme_classic()
d1 %>%
mutate(Condition=fct_recode(Condition, 'High Var.\n(Mono)'='Mono', 'Low Var.\n(Poly)'='Poly')) %>%
ggplot(aes(Condition, Color, fill=Condition)) + scale_fill_manual(values=alpha(c('violetred4', 'royalblue3'))) +
#facet_grid(~PresentationBlock) +
stat_summary(fun.y=mean, geom='bar') +
stat_summary(aes(group=Subject, color=Condition), fun.y=mean, geom='point', alpha=1/2, size=3) +
stat_summary(fun.data=mean_cl_boot, geom='linerange') +
guides(fill=F) +
ylab('Proportion Overspecification') +
xlab('') +
facet_wrap(~ PresentationBlock) +
theme_classic()
d1 %>%
mutate(Condition=fct_recode(Condition, 'High Var.\n(Mono)'='Mono', 'Low Var.\n(Poly)'='Poly')) %>%
ggplot(aes(Condition, Color, fill=Condition)) + scale_fill_manual(values=alpha(c('violetred4', 'royalblue3'))) +
#facet_grid(~PresentationBlock) +
stat_summary(fun.y=mean, geom='bar') +
stat_summary(aes(group=Subject, color=Condition), fun.y=mean, geom='point', alpha=1/2, size=3) +
stat_summary(fun.data=mean_cl_boot, geom='linerange') +
guides(fill=F) +
ylab('Proportion Overspecification') +
xlab('') +
facet_wrap(~ PresentationBlock) +
theme_classic()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(brms)
library(forcats)
library(Hmisc)
d1 <- data.frame(read.delim("~/Desktop/R Scripts/YPigEx1.txt"))
summary(d1)
d1 %>% pull(Subject) %>% unique() %>% length()
d1 %>% pull(Item) %>% unique() %>% length()
d1 %>%
group_by(Subject, Condition) %>%
summarise(N=n())
d1 %>%
mutate(Condition=fct_recode(Condition, 'High Var.\n(Mono)'='Mono', 'Low Var.\n(Poly)'='Poly')) %>%
ggplot(aes(Condition, Color, fill=Condition)) + scale_fill_manual(values=alpha(c('violetred4', 'royalblue3'))) +
#facet_grid(~PresentationBlock) +
stat_summary(fun.y=mean, geom='bar') +
stat_summary(aes(group=Subject, color=Condition), fun.y=mean, geom='point', alpha=1/2, size=3) +
stat_summary(fun.data=mean_cl_boot, geom='linerange') +
guides(fill=F) +
ylab('Proportion Overspecification') +
xlab('') +
facet_wrap(~ PresentationBlock) +
theme_classic()
d1 %>%
mutate(Condition=fct_recode(Condition, 'High Var.\n(Mono)'='Mono', 'Low Var.\n(Poly)'='Poly')) %>%
ggplot(aes(Condition, Color, fill=Condition)) + scale_fill_manual(values=alpha(c('violetred4', 'royalblue3'))) +
#facet_grid(~PresentationBlock) +
stat_summary(fun.y=mean, geom='bar') +
stat_summary(aes(group=Subject, color=Condition), fun.y=mean, geom='point', alpha=1/2, size=3) +
stat_summary(fun.data=mean_cl_boot, geom='linerange') +
guides(fill=F) +
ylab('Proportion Overspecification') +
xlab('') +
facet_wrap(~ PresentationBlock)
+
theme_classic()
d1 %>%
mutate(Condition=fct_recode(Condition, 'High Var.\n(Mono)'='Mono', 'Low Var.\n(Poly)'='Poly')) %>%
d1 %>%
mutate(Condition=fct_recode(Condition, 'High Var.\n(Mono)'='Mono', 'Low Var.\n(Poly)'='Poly')) %>%
ggplot(aes(Condition, Color, fill=Condition)) + scale_fill_manual(values=alpha(c('violetred4', 'royalblue3'))) +
#facet_grid(~PresentationBlock) +
stat_summary(fun.y=mean, geom='bar') +
stat_summary(aes(group=Subject, color=Condition), fun.y=mean, geom='point', alpha=1/2, size=3) +
stat_summary(fun.data=mean_cl_boot, geom='linerange') +
guides(fill=F) +
ylab('Proportion Overspecification') +
xlab('') +
facet_wrap(~ PresentationBlock) +
theme_classic()
d1 %>%
mutate(Condition=fct_recode(Condition, 'High Var.\n(Mono)'='Mono', 'Low Var.\n(Poly)'='Poly')) %>%
library(lme4)
library(ggplot2)
library(plotly)
ColorContrast <- data.frame(read.delim("~/Desktop/R Scripts/ColorContrast.txt"))
summary(ColorContrast)
ColorContrast$Participant <- factor(ColorContrast$Participant)
numParticipants <- length(levels(ColorContrast$Participant))
numParticipants
library(lme4)
library(ggplot2)
library(plotly)
# KLINTON'S FUNCTION for deviation coding. like contrasts = c(-.5, .5) but continuous
dc <- function(x) {
if (is.factor(x)) {
if (length(levels(x)) < 2) {
stop("Variable passed to dc() has fewer than 2 levels.")
} else if (length(levels(x)) > 2) {
stop("Variable passed to dc() has more than 2 levels.")
}
return(as.numeric(x) - 1.5)
} else if (is.logical(x)) {
return(as.numeric(x) - 0.5)
} else {
stop("Variable passed to dc() is neither a factor nor logical.")
}
}
Under32 <- data.frame(read.delim("~/Desktop/R Scripts/letssee1.txt"))
summary(Under32)
Under32$Participant <- factor(Under32$Participant)
numParticipants <- length(levels(Under32$Participant))
numParticipants
Under32$Participant <- factor(Under32$Participant)
Under32$VersionCtr <- dc(Under32$Version)
hiyacc <- glmer(Modification ~ VersionCtr + (1 | Participant) + (VersionCtr | Target), family="binomial", data=Under32, control = glmerControl(optimizer="bobyqa", optCtrl = list(maxfun = 1e6)))
summary(hiyacc)
library(lme4)
library(ggplot2)
library(plotly)
# KLINTON'S FUNCTION for deviation coding. like contrasts = c(-.5, .5) but continuous
dc <- function(x) {
if (is.factor(x)) {
if (length(levels(x)) < 2) {
stop("Variable passed to dc() has fewer than 2 levels.")
} else if (length(levels(x)) > 2) {
stop("Variable passed to dc() has more than 2 levels.")
}
return(as.numeric(x) - 1.5)
} else if (is.logical(x)) {
return(as.numeric(x) - 0.5)
} else {
stop("Variable passed to dc() is neither a factor nor logical.")
}
}
HG <- data.frame(read.delim("~/Desktop/R Scripts/HindiGroups.txt"))
summary(HG)
HG$PARTICIPANT <- factor(HG$PARTICIPANT)
numParticipants <- length(levels(HG$PARTICIPANT))
numParticipants
library(plyr)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
mean(New$Mention, na.rm=TRUE)
tgc <- summarySE(New, measurevar="Mention", groupvar=c("Age.group"), na.rm=TRUE)
tgc
tgc$PARTICIPANT <- factor(tgc$Age.group)
tgc1 <- summarySE(New, measurevar="Mention", groupvar=c("Age.group", "PARTICIPANT"), na.rm=TRUE)
tgc1
library(lme4)
library(ggplot2)
library(plotly)
# KLINTON'S FUNCTION for deviation coding. like contrasts = c(-.5, .5) but continuous
dc <- function(x) {
if (is.factor(x)) {
if (length(levels(x)) < 2) {
stop("Variable passed to dc() has fewer than 2 levels.")
} else if (length(levels(x)) > 2) {
stop("Variable passed to dc() has more than 2 levels.")
}
return(as.numeric(x) - 1.5)
} else if (is.logical(x)) {
return(as.numeric(x) - 0.5)
} else {
stop("Variable passed to dc() is neither a factor nor logical.")
}
}
HG <- data.frame(read.delim("~/Desktop/R Scripts/HindiGroups.txt"))
summary(HG)
HG$PARTICIPANT <- factor(HG$PARTICIPANT)
numParticipants <- length(levels(HG$PARTICIPANT))
numParticipants
New <- subset(HG, NEW=="NEW")
New$GROUPCtr <- dc(New$GROUP)
library(lme4)
library(ggplot2)
library(plotly)
# KLINTON'S FUNCTION for deviation coding. like contrasts = c(-.5, .5) but continuous
dc <- function(x) {
if (is.factor(x)) {
if (length(levels(x)) < 2) {
stop("Variable passed to dc() has fewer than 2 levels.")
} else if (length(levels(x)) > 2) {
stop("Variable passed to dc() has more than 2 levels.")
}
return(as.numeric(x) - 1.5)
} else if (is.logical(x)) {
return(as.numeric(x) - 0.5)
} else {
stop("Variable passed to dc() is neither a factor nor logical.")
}
}
HG <- data.frame(read.delim("~/Desktop/R Scripts/HindiGroups.txt"))
summary(HG)
HG$PARTICIPANT <- factor(HG$PARTICIPANT)
numParticipants <- length(levels(HG$PARTICIPANT))
numParticipants
New <- subset(HG, NEW=="NEW")
library(plyr)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
mean(New$Mention, na.rm=TRUE)
tgc <- summarySE(New, measurevar="Mention", groupvar=c("Age.group"), na.rm=TRUE)
tgc
tgc$PARTICIPANT <- factor(tgc$Age.group)
tgc1 <- summarySE(New, measurevar="Mention", groupvar=c("Age.group", "PARTICIPANT"), na.rm=TRUE)
tgc1
tgc$PARTICIPANT <- factor(tgc$Age.group)
tgc
tgc <- summarySE(New, measurevar="Mention", groupvar=c("Age.group"), na.rm=TRUE)
tgc
mean(New$Mention, na.rm=TRUE)
summary(New)
tgc <- summarySE(New, measurevar="Mention", groupvar=c("AGE"), na.rm=TRUE)
tgc
summary(New)
tgc <- summarySE(New, measurevar="Mention", groupvar=c("AGE"), na.rm=TRUE)
tgc
tgc$PARTICIPANT <- factor(tgc$Age.group)
tgc1 <- summarySE(New, measurevar="Mention", groupvar=c("AGE", "PARTICIPANT"), na.rm=TRUE)
tgc1
tgc$PARTICIPANT <- factor(tgc$AGE)
tgc1 <- summarySE(New, measurevar="Mention", groupvar=c("AGE", "PARTICIPANT"), na.rm=TRUE)
tgc1
vf <- ggplot(tgc, aes(x=AGE, y=Mention, fill=AGE)) + scale_fill_manual(values=alpha(c('violetred4', 'cyan4', 'royalblue3'))) + ylim(0,1) + geom_bar(position=position_dodge(), stat="identity")
vf
v3 <- vf+labs(y = "Use of 'Ek' for new characters by age group") + theme_classic()
v3
v4 <- v3 + geom_point(data=tgc1, aes(color=AGE), alpha = 1/2, size=3)
v4
v5 <- v4 + geom_errorbar(aes(ymin=Mention-se, ymax=Mention+se),
width=.4,                    # Width of the error bars
position=position_dodge(.9),
colour="black", alpha=0.9, size=1)
v5
library(lme4)
library(ggplot2)
library(plotly)
# KLINTON'S FUNCTION for deviation coding. like contrasts = c(-.5, .5) but continuous
dc <- function(x) {
if (is.factor(x)) {
if (length(levels(x)) < 2) {
stop("Variable passed to dc() has fewer than 2 levels.")
} else if (length(levels(x)) > 2) {
stop("Variable passed to dc() has more than 2 levels.")
}
return(as.numeric(x) - 1.5)
} else if (is.logical(x)) {
return(as.numeric(x) - 0.5)
} else {
stop("Variable passed to dc() is neither a factor nor logical.")
}
}
Oral <- data.frame(read.delim("~/Desktop/R Scripts/MandinkaOralStorytelling.txt"))
summary(Oral)
library(plyr)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
mean(Oral$O.marked, na.rm=TRUE)
summary(Oral)
tgc <- summarySE(Oral, measurevar="O.marked", groupvar=c("Character"), na.rm=TRUE)
tgc
tgc$Participant<- factor(tgc$Participant)
tgc1 <- summarySE(Oral, measurevar="O.marked", groupvar=c("Character", "Participant"), na.rm=TRUE)
tgc1
vf <- ggplot(tgc, aes(x=Character, y=O.marked, fill=Character)) + scale_fill_manual(values=alpha(c('violetred4', 'royalblue3'))) + ylim(0,1) + geom_bar(position=position_dodge(), stat="identity")
vf
v3 <- vf+labs(y = "O-marked nouns") + theme_classic()
v3
v4 <- v3 + geom_point(data=tgc1, aes(color=Character), alpha = 1/2, size=3)
v4
v5 <- v4 + geom_errorbar(aes(ymin=O.marked-se, ymax=O.marked+se),
width=.4,                    # Width of the error bars
position=position_dodge(.9),
colour="black", alpha=0.9, size=1)
v5
vf <- ggplot(tgc, aes(x=Character, y=O.marked, fill=Character)) + scale_fill_manual(values=alpha(c('violetred4', 'royalblue3'))) + ylim(0,1) + geom_bar(position=position_dodge(), stat="identity")
vf
